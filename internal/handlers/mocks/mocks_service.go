// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers/schedule.go
//
// Generated by this command:
//
//	mockgen -source=./internal/handlers/schedule.go -destination=./internal/handlers/mocks/mocks_service.go
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	domain "github.com/LeoUraltsev/medication-reminder/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
	isgomock struct{}
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// AddSchedules mocks base method.
func (m *MockServices) AddSchedules(ctx context.Context, schedule domain.Schedule) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSchedules", ctx, schedule)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSchedules indicates an expected call of AddSchedules.
func (mr *MockServicesMockRecorder) AddSchedules(ctx, schedule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSchedules", reflect.TypeOf((*MockServices)(nil).AddSchedules), ctx, schedule)
}

// NextTaking mocks base method.
func (m *MockServices) NextTaking(ctx context.Context, userID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextTaking", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextTaking indicates an expected call of NextTaking.
func (mr *MockServicesMockRecorder) NextTaking(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextTaking", reflect.TypeOf((*MockServices)(nil).NextTaking), ctx, userID)
}

// Schedule mocks base method.
func (m *MockServices) Schedule(ctx context.Context, userID, scheduleID int64) (domain.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", ctx, userID, scheduleID)
	ret0, _ := ret[0].(domain.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schedule indicates an expected call of Schedule.
func (mr *MockServicesMockRecorder) Schedule(ctx, userID, scheduleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockServices)(nil).Schedule), ctx, userID, scheduleID)
}

// SchedulesByUserID mocks base method.
func (m *MockServices) SchedulesByUserID(ctx context.Context, userID int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedulesByUserID", ctx, userID)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedulesByUserID indicates an expected call of SchedulesByUserID.
func (mr *MockServicesMockRecorder) SchedulesByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulesByUserID", reflect.TypeOf((*MockServices)(nil).SchedulesByUserID), ctx, userID)
}
